import json
import os
import pathlib
import httpx
from services import analyzers
from services.diff_utils import prune_patch
from services.llm import review_with_llm

MAX_DIFF_BUDGET = 7000
PER_FILE_BUDGET = 2000

def get_pr_info():
    event_path = os.environ["GITHUB_EVENT_PATH"]
    data = json.loads(open(event_path, "r", encoding="utf-8").read())
    pr = data["pull_request"]
    repo = data["repository"]
    return {
        "owner": repo["owner"]["login"],
        "repo": repo["name"],
        "number": pr["number"],
    }

def get_changed_files(owner, repo, number, token):
    url = f"https://api.github.com/repos/{owner}/{repo}/pulls/{number}/files"
    headers = {"Authorization": f"token {token}", "Accept": "application/vnd.github+json"}
    with httpx.Client(timeout=30.0) as client:
        r = client.get(url, headers=headers)
    r.raise_for_status()
    return r.json()

def post_review(owner, repo, number, body, token):
    url = f"https://api.github.com/repos/{owner}/{repo}/pulls/{number}/reviews"
    headers = {"Authorization": f"token {token}", "Accept": "application/vnd.github+json"}
    payload = {"body": body, "event": "COMMENT"}
    with httpx.Client(timeout=30.0) as client:
        r = client.post(url, headers=headers, json=payload)
    r.raise_for_status()

def summarize_semgrep(res):
    items = res.get("results", [])[:25]
    if not items: return "No Semgrep findings."
    out = []
    for r in items:
        path = r.get("path")
        line = (r.get("start") or {}).get("line")
        cid = r.get("check_id")
        msg = (r.get("extra") or {}).get("message")
        out.append(f"- {cid} @ {path}:{line} — {msg}")
    return "\n".join(out)

def summarize_bandit(res):
    items = res.get("results", [])[:25]
    if not items: return "No Bandit findings."
    out = []
    for i in items:
        path = i.get("filename")
        line = i.get("line_number")
        tid = i.get("test_id")
        msg = i.get("issue_text")
        out.append(f"- {tid} @ {path}:{line} — {msg}")
    return "\n".join(out)

def main():
    info = get_pr_info()
    token = os.environ["GITHUB_TOKEN"]

    # 1) Static analysis on the checked-out repo
    semgrep_res = analyzers.run_semgrep(".")
    bandit_res  = analyzers.run_bandit(".")

    # 2) Collect diffs for changed files
    changed = get_changed_files(info["owner"], info["repo"], info["number"], token)
    diffs = []
    total = 0
    for f in changed:
        p = f.get("patch")
        if not p: continue
        pp = prune_patch(p, PER_FILE_BUDGET)
        entry = f"### {f['filename']}\n```diff\n{pp}\n```\n"
        if total + len(entry) > MAX_DIFF_BUDGET:
            break
        diffs.append(entry)
        total += len(entry)

    # 3) Build prompt
    prompt_base = pathlib.Path("app/prompts/reviewer_prompt.txt").read_text(encoding="utf-8")
    semgrep_txt = summarize_semgrep(semgrep_res)
    bandit_txt  = summarize_bandit(bandit_res)

    prompt = f"""{prompt_base}

# DIFFS
{''.join(diffs)}

# STATIC ANALYSIS
## Semgrep
{semgrep_txt}

## Bandit
{bandit_txt}
"""

    # 4) LLM review
    answer = review_with_llm(prompt)

    body = f"""## Automated Review (LLM + Static Analysis)

{answer}

---
<sub>Generated by Code Review Assistant (Semgrep/Bandit + Ollama)</sub>
"""
    # 5) Post to PR
    post_review(info["owner"], info["repo"], info["number"], body, token)
    print("Posted review ✅")

if __name__ == "__main__":
    main()
